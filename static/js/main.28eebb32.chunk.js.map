{"version":3,"sources":["Components/Header.js","Redux/counterSlice.js","Redux/livesSlice.js","Components/Controls.js","Utils/ControlsFunctions.js","Assets/vomit.mp3","Components/VomitIcon.js","Assets/lick.mp3","Components/TongueIcon.js","Utils/GameBoardFunctions.js","Components/GameBoard.js","App.js","Redux/store.js","serviceWorker.js","index.js"],"names":["Header","className","id","counterSlice","createSlice","name","initialState","value","reducers","incrementCount","state","resetCount","actions","selectCount","counter","livesSlice","lives","incrementLives","decrementLives","resetLives","selectLives","Controls","count","useSelector","SmileyIcon","props","useState","play","setPlay","dispatch","useDispatch","defaultOptions","loop","autoplay","animationData","vomit","rendererSettings","preserveAspectRatio","onClick","Audio","vomitSound","options","height","width","isPaused","isStopped","isClickToPauseDisabled","eventListeners","eventName","callback","TongueIcon","tongue","lickSound","setTimeout","clickCallback","speed","createClassNameArray","numberOfIcons","max","classNameArray","Array","from","length","element","Math","floor","random","GameBoard","targetClicked","setTargetClicked","iconsJSX","setIconsJSX","useEffect","map","index","classNameProp","VomitIcon","App","cursor","setCursor","store","configureStore","reducer","counterReducer","livesReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28eebb32.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"container\" id=\"header-row\">\n      <div id=\"header-col\">Dr Corona</div>\n      <div id=\"header-col-small\">The Game</div>\n    </div>\n  );\n};\nexport default Header;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    incrementCount: (state) => {\n      state.value += 1;\n    },\n    resetCount: (state) => {\n      state.value = 0;\n    },\n  },\n});\n\nexport const { incrementCount, resetCount } = counterSlice.actions;\n\nexport const selectCount = (state) => state.counter.value;\n\nexport default counterSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  lives: 3,\n};\n\nexport const livesSlice = createSlice({\n  name: \"lives\",\n  initialState,\n  reducers: {\n    incrementLives: (state) => {\n      state.lives += 1;\n    },\n    decrementLives: (state) => {\n      state.lives -= 1;\n    },\n    resetLives: (state) => {\n      state.lives = 3;\n    },\n  },\n});\n\nexport const { incrementLives, decrementLives, resetLives } = livesSlice.actions;\n\nexport const selectLives = (state) => state.lives.lives;\n\nexport default livesSlice.reducer;\n","import React from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { selectCount } from \"../Redux/counterSlice\";\nimport { selectLives } from \"../Redux/livesSlice\";\n\nimport { calculateScore } from \"../Utils/ControlsFunctions\";\n\nconst Controls = () => {\n  let timeleft = 20;\n\n  const count = useSelector(selectCount);\n  const lives = useSelector(selectLives);\n  return (\n    <div className=\"container\" id=\"controls-div\">\n      <span>{`Score: ${calculateScore(count)} Time: ${timeleft}s Lives: ${lives}`}</span>\n    </div>\n  );\n};\nexport default Controls;\n","export const calculateScore = (counter) => {\n  return counter ** 2;\n};\n","export default __webpack_public_path__ + \"static/media/vomit.831bf6e9.mp3\";","import React, { useState } from \"react\";\nimport Lottie from \"react-lottie\";\nimport vomit from \"../Assets/vomited.json\";\nimport vomitSound from \"../Assets/vomit.mp3\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { resetCount } from \"../Redux/counterSlice\";\nimport { selectLives, decrementLives, resetLives } from \"../Redux/livesSlice\";\n\nconst SmileyIcon = (props) => {\n  const [play, setPlay] = useState(false);\n  const dispatch = useDispatch();\n  const lives = useSelector(selectLives);\n\n  const playAudio = () => {\n    new Audio(vomitSound).play();\n  };\n\n  const defaultOptions = {\n    loop: false,\n    autoplay: false,\n    animationData: vomit,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n      id: \"vomit-icon\",\n    },\n  };\n  return (\n    <div\n      onClick={() => {\n        if (!play) {\n          playAudio();\n          if (lives > 0) {\n            dispatch(decrementLives());\n          } else {\n            dispatch(resetCount());\n            dispatch(resetLives());\n          }\n        }\n        setPlay(true);\n      }}\n    >\n      <Lottie\n        options={defaultOptions}\n        height={70}\n        width={70}\n        isPaused={false}\n        isStopped={!play}\n        isClickToPauseDisabled={true}\n        eventListeners={[\n          {\n            eventName: \"complete\",\n            callback: () => setPlay(false),\n          },\n        ]}\n      />\n    </div>\n  );\n};\nexport default SmileyIcon;\n","export default __webpack_public_path__ + \"static/media/lick.57eaa5bd.mp3\";","import React, { useState } from \"react\";\nimport Lottie from \"react-lottie\";\nimport tongue from \"../Assets/tongue-out.json\";\nimport lickSound from \"../Assets/lick.mp3\";\n\nimport { useDispatch } from \"react-redux\";\nimport { incrementCount } from \"../Redux/counterSlice\";\n\nconst TongueIcon = (props) => {\n  const [play, setPlay] = useState(false);\n  const dispatch = useDispatch();\n\n  const playAudio = () => {\n    new Audio(lickSound).play();\n  };\n\n  const defaultOptions = {\n    loop: false,\n    autoplay: false,\n    animationData: tongue,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n      id: \"tongue-icon\",\n    },\n  };\n  return (\n    <div\n      onClick={() => {\n        if (!play) {\n          playAudio();\n          dispatch(incrementCount());\n        }\n        setPlay(true);\n        setTimeout(() => {\n          props.clickCallback();\n        }, 300);\n      }}\n    >\n      <Lottie\n        className=\"vomit-lottie\"\n        options={defaultOptions}\n        speed={4}\n        height={70}\n        width={70}\n        isPaused={false}\n        isStopped={!play}\n        isClickToPauseDisabled={true}\n        eventListeners={[\n          {\n            eventName: \"complete\",\n            callback: () => setPlay(false),\n          },\n        ]}\n      />\n    </div>\n  );\n};\nexport default TongueIcon;\n","import VomitIcon from \"../Components/VomitIcon\";\nimport TongueIcon from \"../Components/TongueIcon\";\n\nconst getRandomIntNumber = (max) => {\n  return Math.floor(Math.random() * max);\n};\n\nconst createClassNameArray = (numberOfIcons) => {\n  const classNameArray = Array.from({ length: numberOfIcons }, (element) => \"\");\n  classNameArray[getRandomIntNumber(numberOfIcons)] = \"target\";\n  return classNameArray;\n};\n\nexport const getTrumpIcons = (numberOfIcons, clickCallback) => {\n  return createClassNameArray(numberOfIcons).map((className, index) => {\n    if (className === \"target\")\n      return <TongueIcon key={index} classNameProp={className} clickCallback={clickCallback} />;\n    else {\n      return <VomitIcon key={index} classNameProp={className} />;\n    }\n  });\n};\n","import React, { useState, useEffect } from \"react\";\nimport { getTrumpIcons } from \"../Utils/GameBoardFunctions\";\n\nconst GameBoard = () => {\n  const [targetClicked, setTargetClicked] = useState(0);\n\n  const [iconsJSX, setIconsJSX] = useState(\"\");\n  useEffect(() => {\n    const incrementTargetClicks = () => {\n      setTargetClicked(targetClicked + 1);\n    };\n    setIconsJSX(getTrumpIcons(20, incrementTargetClicks));\n  }, [targetClicked]);\n\n  return (\n    <div className=\"container\" id=\"game-board-div\">\n      {iconsJSX}\n    </div>\n  );\n};\nexport default GameBoard;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Components/Header\";\nimport Controls from \"./Components/Controls\";\nimport GameBoard from \"./Components/GameBoard\";\n\nconst App = () => {\n  const [cursor, setCursor] = useState(\"unclicked\");\n\n  const changeCursor = () => {\n    setCursor(\"clicked\");\n  };\n\n  useEffect(() => {\n    if (cursor === \"clicked\") {\n      setTimeout(() => {\n        setCursor(\"unclicked\");\n      }, 90);\n    }\n  }, [cursor]);\n\n  return (\n    <div className={`App ${cursor}`} onClick={() => changeCursor()}>\n      <Header />\n      <Controls />\n      <GameBoard />\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counterSlice\";\nimport livesReducer from \"./livesSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    lives: livesReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./SCSS/main.css\";\nimport App from \"./App\";\nimport { store } from \"./Redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}