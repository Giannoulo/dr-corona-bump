{"version":3,"sources":["Components/Header.js","Redux/counterSlice.js","Redux/livesSlice.js","Utils/ControlsFunctions.js","Components/Timer.js","Components/Controls.js","Assets/vomit.mp3","Components/VomitIcon.js","Assets/lick.mp3","Components/TongueIcon.js","Utils/GameBoardFunctions.js","Components/GameBoard.js","Components/TopScore.js","Components/InstallButton.js","App.js","Redux/store.js","serviceWorkerRegistration.js","index.js"],"names":["Header","className","id","counterSlice","createSlice","name","initialState","value","reducers","incrementCount","state","resetCount","actions","selectCount","counter","livesSlice","lives","incrementLives","decrementLives","resetLives","selectLives","calculateScore","Timer","props","useState","time","setTime","useEffect","myInterval","setInterval","clearInterval","score","localStorage","getItem","parseInt","setItem","saveTopScoreLocaly","count","Controls","useSelector","SmileyIcon","play","setPlay","dispatch","useDispatch","defaultOptions","loop","autoplay","animationData","vomit","rendererSettings","preserveAspectRatio","onClick","Audio","vomitSound","options","speed","height","pixelSize","width","isPaused","isStopped","isClickToPauseDisabled","eventListeners","eventName","callback","TongueIcon","tongue","lickSound","setTimeout","clickCallback","createClassNameArray","numberOfIcons","max","classNameArray","Array","from","length","element","Math","floor","random","getBoardIcons","tilePixelSize","viewWidth","window","innerWidth","min","calculateTileDimensions","map","index","classNameProp","VomitIcon","GameBoard","targetClicked","setTargetClicked","iconsJSX","setIconsJSX","TopScore","InstallButton","visibleInstallButton","setVisibleInstallButton","installPrompt","setInstallPrompt","handleInstallPrompt","e","preventDefault","addEventListener","_","removeEventListener","prompt","undefined","icon","faMobileAlt","App","store","configureStore","reducer","counterReducer","livesReducer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.317c557f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"container\" id=\"header-row\">\n      <div id=\"header-col\">Dr Corona</div>\n      <div id=\"header-col-small\">The Game</div>\n    </div>\n  );\n};\nexport default Header;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    incrementCount: (state) => {\n      state.value += 1;\n    },\n    resetCount: (state) => {\n      state.value = 0;\n    },\n  },\n});\n\nexport const { incrementCount, resetCount } = counterSlice.actions;\n\nexport const selectCount = (state) => state.counter.value;\n\nexport default counterSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  lives: 3,\n};\n\nexport const livesSlice = createSlice({\n  name: \"lives\",\n  initialState,\n  reducers: {\n    incrementLives: (state) => {\n      state.lives += 1;\n    },\n    decrementLives: (state) => {\n      state.lives -= 1;\n    },\n    resetLives: (state) => {\n      state.lives = 3;\n    },\n  },\n});\n\nexport const { incrementLives, decrementLives, resetLives } = livesSlice.actions;\n\nexport const selectLives = (state) => state.lives.lives;\n\nexport default livesSlice.reducer;\n","export const calculateScore = (counter) => {\n  return counter ** 2;\n};\n\nexport const saveTopScoreLocaly = (counter) => {\n  const score = calculateScore(counter);\n  if (localStorage.getItem(\"topScore\")) {\n    if (parseInt(score) > parseInt(localStorage.getItem(\"topScore\"))) {\n      localStorage.setItem(\"topScore\", score);\n    }\n  } else {\n    localStorage.setItem(\"topScore\", score);\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { saveTopScoreLocaly } from \"../Utils/ControlsFunctions\";\n\nconst Timer = (props) => {\n  const [time, setTime] = useState(10);\n\n  useEffect(() => {\n    let myInterval = setInterval(() => {\n      if (time > 0) {\n        setTime(time - 1);\n      }\n      if (time === 0) {\n        clearInterval(myInterval);\n      }\n    }, 1000);\n    return () => {\n      clearInterval(myInterval);\n    };\n  }, [time]);\n\n  useEffect(() => {\n    if (time === 0) {\n      saveTopScoreLocaly(props.count);\n    }\n  });\n\n  return <span>{time}</span>;\n};\nexport default Timer;\n","import React from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { selectCount } from \"../Redux/counterSlice\";\nimport { selectLives } from \"../Redux/livesSlice\";\n\nimport { calculateScore } from \"../Utils/ControlsFunctions\";\nimport Timer from \"./Timer\";\n\nconst Controls = () => {\n  const count = useSelector(selectCount);\n  const lives = useSelector(selectLives);\n\n  return (\n    <div className=\"container\" id=\"controls-div\">\n      <span>\n        {`Score: ${calculateScore(count)} Time: `}\n        <Timer count={count} />\n        {` Lives: ${lives}`}\n      </span>\n    </div>\n  );\n};\nexport default Controls;\n","export default __webpack_public_path__ + \"static/media/vomit.831bf6e9.mp3\";","import React, { useState } from \"react\";\nimport Lottie from \"react-lottie\";\nimport vomit from \"../Assets/vomited.json\";\nimport vomitSound from \"../Assets/vomit.mp3\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { resetCount, selectCount } from \"../Redux/counterSlice\";\nimport { selectLives, decrementLives, resetLives } from \"../Redux/livesSlice\";\n\nconst SmileyIcon = (props) => {\n  const [play, setPlay] = useState(false);\n  const dispatch = useDispatch();\n  const lives = useSelector(selectLives);\n  const count = useSelector(selectCount);\n\n  const playAudio = () => {\n    new Audio(vomitSound).play();\n  };\n\n  const defaultOptions = {\n    loop: false,\n    autoplay: false,\n    animationData: vomit,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n      id: \"vomit-icon\",\n    },\n  };\n  return (\n    <div\n      className=\"tile-divs\"\n      onClick={() => {\n        if (!play) {\n          playAudio();\n          if (lives > 0 && count > 0) {\n            dispatch(decrementLives());\n          } else {\n            dispatch(resetCount());\n            dispatch(resetLives());\n          }\n        }\n        setPlay(true);\n      }}\n    >\n      <Lottie\n        options={defaultOptions}\n        speed={2}\n        height={props.pixelSize}\n        width={props.pixelSize}\n        isPaused={false}\n        isStopped={!play}\n        isClickToPauseDisabled={true}\n        eventListeners={[\n          {\n            eventName: \"complete\",\n            callback: () => setPlay(false),\n          },\n        ]}\n      />\n    </div>\n  );\n};\nexport default SmileyIcon;\n","export default __webpack_public_path__ + \"static/media/lick.57eaa5bd.mp3\";","import React, { useState } from \"react\";\nimport Lottie from \"react-lottie\";\nimport tongue from \"../Assets/tongue-out.json\";\nimport lickSound from \"../Assets/lick.mp3\";\n\nimport { useDispatch } from \"react-redux\";\nimport { incrementCount } from \"../Redux/counterSlice\";\n\nconst TongueIcon = (props) => {\n  const [play, setPlay] = useState(false);\n  const dispatch = useDispatch();\n\n  const playAudio = () => {\n    new Audio(lickSound).play();\n  };\n\n  const defaultOptions = {\n    loop: false,\n    autoplay: false,\n    animationData: tongue,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n      id: \"tongue-icon\",\n    },\n  };\n  return (\n    <div\n      onClick={() => {\n        if (!play) {\n          playAudio();\n          dispatch(incrementCount());\n        }\n        setPlay(true);\n        setTimeout(() => {\n          props.clickCallback();\n        }, 300);\n      }}\n    >\n      <Lottie\n        className=\"vomit-lottie\"\n        options={defaultOptions}\n        speed={8}\n        height={props.pixelSize}\n        width={props.pixelSize}\n        isPaused={false}\n        isStopped={!play}\n        isClickToPauseDisabled={true}\n        eventListeners={[\n          {\n            eventName: \"complete\",\n            callback: () => setPlay(false),\n          },\n        ]}\n      />\n    </div>\n  );\n};\nexport default TongueIcon;\n","import VomitIcon from \"../Components/VomitIcon\";\nimport TongueIcon from \"../Components/TongueIcon\";\n\nconst getRandomIntNumber = (max) => {\n  return Math.floor(Math.random() * max);\n};\n\nconst createClassNameArray = (numberOfIcons) => {\n  const classNameArray = Array.from({ length: numberOfIcons }, (element) => \"\");\n  classNameArray[getRandomIntNumber(numberOfIcons)] = \"target\";\n  return classNameArray;\n};\n\nconst calculateTileDimensions = () => {\n  const viewWidth = window.innerWidth;\n  const tilePixelSize = Math.min(90, viewWidth / 5);\n  return tilePixelSize;\n};\n\nexport const getBoardIcons = (numberOfIcons, clickCallback) => {\n  const tilePixelSize = calculateTileDimensions();\n  return createClassNameArray(numberOfIcons).map((className, index) => {\n    if (className === \"target\")\n      return (\n        <TongueIcon\n          key={index}\n          classNameProp={className}\n          clickCallback={clickCallback}\n          pixelSize={tilePixelSize}\n        />\n      );\n    else {\n      return <VomitIcon key={index} classNameProp={className} pixelSize={tilePixelSize} />;\n    }\n  });\n};\n","import React, { useState, useEffect } from \"react\";\nimport { getBoardIcons } from \"../Utils/GameBoardFunctions\";\n\nconst GameBoard = () => {\n  const [targetClicked, setTargetClicked] = useState(0);\n  const [iconsJSX, setIconsJSX] = useState(\"\");\n  useEffect(() => {\n    const incrementTargetClicks = () => {\n      setTargetClicked(targetClicked + 1);\n    };\n    setIconsJSX(getBoardIcons(20, incrementTargetClicks));\n  }, [targetClicked]);\n\n  return (\n    <div className=\"container\" id=\"game-board-div\">\n      {iconsJSX}\n    </div>\n  );\n};\nexport default GameBoard;\n","import React from \"react\";\n\nconst TopScore = () => {\n  return (\n    <span className=\"container\" id=\"topscore\">\n      Top Score: {localStorage.getItem(\"topScore\") ? localStorage.getItem(\"topScore\") : \"0\"}\n    </span>\n  );\n};\nexport default TopScore;\n","import React, { useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMobileAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst InstallButton = () => {\n  const [visibleInstallButton, setVisibleInstallButton] = useState(false);\n  const [installPrompt, setInstallPrompt] = useState(null);\n\n  useEffect(() => {\n    const handleInstallPrompt = (e) => {\n      e.preventDefault();\n      setVisibleInstallButton(true);\n      setInstallPrompt(e);\n    };\n    window.addEventListener(\"beforeinstallprompt\", (e) => handleInstallPrompt(e));\n    return (_) => {\n      window.removeEventListener(\"beforeinstallprompt\", (e) => handleInstallPrompt(e));\n    };\n  }, []);\n\n  return (\n    <div\n      id=\"install-button-constainer\"\n      className={visibleInstallButton ? \"visible\" : \"\"}\n      onClick={installPrompt ? installPrompt.prompt : undefined}\n    >\n      <FontAwesomeIcon icon={faMobileAlt} /> Install App\n    </div>\n  );\n};\n\nexport default InstallButton;\n","import React from \"react\";\nimport Header from \"./Components/Header\";\nimport Controls from \"./Components/Controls\";\nimport GameBoard from \"./Components/GameBoard\";\nimport TopScore from \"./Components/TopScore\";\nimport InstallButton from \"./Components/InstallButton\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Controls />\n      <GameBoard />\n      <TopScore />\n      <InstallButton />\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counterSlice\";\nimport livesReducer from \"./livesSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    lives: livesReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./SCSS/main.css\";\nimport App from \"./App\";\nimport { store } from \"./Redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}