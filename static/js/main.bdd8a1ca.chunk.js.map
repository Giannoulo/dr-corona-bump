{"version":3,"sources":["Components/Header.js","Redux/counterSlice.js","Components/Controls.js","Components/VomitIcon.js","Components/TongueIcon.js","Utils/GameBoardFunctions.js","Components/GameBoard.js","App.js","Redux/store.js","serviceWorker.js","index.js"],"names":["Header","className","id","counterSlice","createSlice","name","initialState","value","reducers","increment","state","reset","actions","selectCount","decrement","incrementByAmount","counter","Controls","count","useSelector","useDispatch","SmileyIcon","props","useState","play","setPlay","defaultOptions","loop","autoplay","animationData","vomit","rendererSettings","preserveAspectRatio","onClick","options","height","width","isPaused","isStopped","isClickToPauseDisabled","eventListeners","eventName","callback","TongueIcon","dispatch","tongue","setTimeout","clickCallback","speed","createClassNameArray","numberOfIcons","max","classNameArray","Array","from","length","element","Math","floor","random","GameBoard","targetClicked","setTargetClicked","iconsJSX","setIconsJSX","useEffect","map","index","classNameProp","VomitIcon","App","cursor","setCursor","store","configureStore","reducer","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdd8a1ca.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"container\" id=\"header-row\">\n      <div id=\"header-col\">Dr Corona</div>\n      <div id=\"header-col-small\">The Game</div>\n    </div>\n  );\n};\nexport default Header;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    reset: (state) => {\n      state.value = 0;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\nexport const selectCount = (state) => state.counter.value;\n\nexport default counterSlice.reducer;\n","import React from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { increment, reset, selectCount } from \"../Redux/counterSlice\";\n\nconst Controls = () => {\n  let score = 24;\n  let lives = 3;\n  let timeleft = 20;\n\n  const count = useSelector(selectCount);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"container\" id=\"controls-div\">\n      <span>{`Score: ${count * 50} Time: ${timeleft}s Lives: ${lives}`}</span>\n    </div>\n  );\n};\nexport default Controls;\n","import React, { useState } from \"react\";\nimport Lottie from \"react-lottie\";\nimport vomit from \"../Assets/vomited.json\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { increment, reset, selectCount } from \"../Redux/counterSlice\";\n\nconst SmileyIcon = (props) => {\n  const [play, setPlay] = useState(false);\n\n  const defaultOptions = {\n    loop: false,\n    autoplay: false,\n    animationData: vomit,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  return (\n    <div onClick={() => setPlay(true)}>\n      <Lottie\n        options={defaultOptions}\n        height={70}\n        width={70}\n        isPaused={false}\n        isStopped={!play}\n        isClickToPauseDisabled={true}\n        eventListeners={[\n          {\n            eventName: \"complete\",\n            callback: () => setPlay(false),\n          },\n        ]}\n      />\n    </div>\n  );\n};\nexport default SmileyIcon;\n","import React, { useState } from \"react\";\nimport Lottie from \"react-lottie\";\nimport tongue from \"../Assets/tongue-out.json\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { increment, reset, selectCount } from \"../Redux/counterSlice\";\n\nconst TongueIcon = (props) => {\n  const [play, setPlay] = useState(false);\n\n  const count = useSelector(selectCount);\n  const dispatch = useDispatch();\n\n  const defaultOptions = {\n    loop: false,\n    autoplay: false,\n    animationData: tongue,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  return (\n    <div\n      onClick={() => {\n        if (!play) {\n          dispatch(increment());\n        }\n        setPlay(true);\n        setTimeout(() => {\n          props.clickCallback();\n        }, 300);\n      }}\n    >\n      <Lottie\n        options={defaultOptions}\n        speed={4}\n        height={70}\n        width={70}\n        isPaused={false}\n        isStopped={!play}\n        isClickToPauseDisabled={true}\n        eventListeners={[\n          {\n            eventName: \"complete\",\n            callback: () => setPlay(false),\n          },\n        ]}\n      />\n    </div>\n  );\n};\nexport default TongueIcon;\n","import VomitIcon from \"../Components/VomitIcon\";\nimport TongueIcon from \"../Components/TongueIcon\";\n\nconst getRandomIntNumber = (max) => {\n  return Math.floor(Math.random() * max);\n};\n\nconst createClassNameArray = (numberOfIcons) => {\n  const classNameArray = Array.from({ length: numberOfIcons }, (element) => \"\");\n  classNameArray[getRandomIntNumber(numberOfIcons)] = \"target\";\n  return classNameArray;\n};\n\nexport const getTrumpIcons = (numberOfIcons, clickCallback) => {\n  return createClassNameArray(numberOfIcons).map((className, index) => {\n    if (className === \"target\")\n      return <TongueIcon key={index} classNameProp={className} clickCallback={clickCallback} />;\n    else {\n      return <VomitIcon key={index} classNameProp={className} />;\n    }\n  });\n};\n","import React, { useState, useEffect } from \"react\";\nimport { getTrumpIcons } from \"../Utils/GameBoardFunctions\";\n\nconst GameBoard = () => {\n  const [targetClicked, setTargetClicked] = useState(0);\n\n  const [iconsJSX, setIconsJSX] = useState(\"\");\n  useEffect(() => {\n    const incrementTargetClicks = () => {\n      setTargetClicked(targetClicked + 1);\n    };\n    setIconsJSX(getTrumpIcons(20, incrementTargetClicks));\n  }, [targetClicked]);\n\n  return (\n    <div className=\"container\" id=\"game-board-div\">\n      {iconsJSX}\n    </div>\n  );\n};\nexport default GameBoard;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Components/Header\";\nimport Controls from \"./Components/Controls\";\nimport GameBoard from \"./Components/GameBoard\";\n\nconst App = () => {\n  const [cursor, setCursor] = useState(\"unclicked\");\n\n  const changeCursor = () => {\n    setCursor(\"clicked\");\n  };\n\n  useEffect(() => {\n    if (cursor === \"clicked\") {\n      setTimeout(() => {\n        setCursor(\"unclicked\");\n      }, 90);\n    }\n  }, [cursor]);\n\n  return (\n    <div className={`App ${cursor}`} onClick={() => changeCursor()}>\n      <Header />\n      <Controls />\n      <GameBoard />\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counterSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./SCSS/main.css\";\nimport App from \"./App\";\nimport { store } from \"./Redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}