{"version":3,"sources":["Assets/dr-corona-title.svg","Assets/corona-trademark.svg","Components/Header.js","Redux/counterSlice.js","Redux/livesSlice.js","Utils/ControlsFunctions.js","Components/Timer.js","Components/Controls.js","Assets/dr-corona-2.svg","Components/DrCoronaIcon.js","Assets/virus.svg","Components/VirusIcon.js","Utils/GameBoardFunctions.js","Components/GameBoard.js","Components/TopScore.js","Components/InstallButton.js","Components/GameOver.js","App.js","Redux/store.js","serviceWorkerRegistration.js","index.js"],"names":["Header","className","id","src","drCoronaTrademark","alt","coronaTitle","counterSlice","createSlice","name","initialState","value","reducers","incrementCount","state","resetCount","actions","selectCount","counter","livesSlice","lives","incrementLives","decrementLives","resetLives","selectLives","calculateScore","Timer","props","useState","time","setTime","dispatch","useDispatch","useEffect","myInterval","setInterval","clearInterval","localStorage","getItem","oldScore","parseInt","playCallback","count","error","console","log","score","setItem","saveTopScoreLocaly","Controls","useSelector","DrCoronaIcon","draggable","drCorona","onClick","VirusIcon","VirusSvg","clickCallback","createClassNameArray","numberOfIcons","max","classNameArray","Array","from","length","element","Math","floor","random","GameBoard","targetClicked","setTargetClicked","iconsJSX","setIconsJSX","map","index","TopScore","InstallButton","installPrompt","setInstallPrompt","handleInstallPrompt","e","preventDefault","window","addEventListener","_","removeEventListener","prompt","undefined","icon","faMobileAlt","GameOver","playGame","newScore","newTopScore","App","setPlayGame","setOldScore","setNewScore","store","configureStore","reducer","counterReducer","livesReducer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d230f383.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/dr-corona-title.5a244b4b.svg\";","export default __webpack_public_path__ + \"static/media/corona-trademark.2d798160.svg\";","import React from \"react\";\nimport coronaTitle from \"../Assets/dr-corona-title.svg\";\nimport drCoronaTrademark from \"../Assets/corona-trademark.svg\";\n\nconst Header = () => {\n  return (\n    <div className=\"container\" id=\"header-row\">\n      <img src={drCoronaTrademark} alt=\"dr-corona-trademark\" id=\"dr-corona-trademark\" />\n      <div id=\"header-col\">\n        <img src={coronaTitle} alt=\"dr-corona-title\" id=\"dr-corona-title\" />\n      </div>\n    </div>\n  );\n};\nexport default Header;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    incrementCount: (state) => {\n      state.value += 1;\n    },\n    resetCount: (state) => {\n      state.value = 0;\n    },\n  },\n});\n\nexport const { incrementCount, resetCount } = counterSlice.actions;\n\nexport const selectCount = (state) => state.counter.value;\n\nexport default counterSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  lives: 3,\n};\n\nexport const livesSlice = createSlice({\n  name: \"lives\",\n  initialState,\n  reducers: {\n    incrementLives: (state) => {\n      state.lives += 1;\n    },\n    decrementLives: (state) => {\n      state.lives -= 1;\n    },\n    resetLives: (state) => {\n      state.lives = 3;\n    },\n  },\n});\n\nexport const { incrementLives, decrementLives, resetLives } = livesSlice.actions;\n\nexport const selectLives = (state) => state.lives.lives;\n\nexport default livesSlice.reducer;\n","export const calculateScore = (counter) => {\n  return counter ** 2;\n};\n\nexport const saveTopScoreLocaly = (counter) => {\n  const score = calculateScore(counter);\n  if (localStorage.getItem(\"topScore\")) {\n    if (parseInt(score) > parseInt(localStorage.getItem(\"topScore\"))) {\n      localStorage.setItem(\"topScore\", score);\n    }\n  } else {\n    localStorage.setItem(\"topScore\", score);\n  }\n};\n","import React, {useState, useEffect} from \"react\";\nimport {saveTopScoreLocaly} from \"../Utils/ControlsFunctions\";\n\nimport {useDispatch} from \"react-redux\";\nimport {resetCount} from \"../Redux/counterSlice\";\n\nconst Timer = (props) => {\n  const [time, setTime] = useState(20);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    let myInterval = setInterval(() => {\n      if (time > 0) {\n        setTime(time - 1);\n      }\n      if (time === 0) {\n        clearInterval(myInterval);\n      }\n    }, 1000);\n    return () => {\n      clearInterval(myInterval);\n    };\n  }, [time]);\n\n  useEffect(() => {\n    if (time === 0) {\n      try {\n        if (localStorage.getItem(\"topScore\")) {\n          const oldScore = parseInt(localStorage.getItem(\"topScore\"));\n          props.playCallback(\"gameOver\", oldScore, props.count);\n        } else {\n          props.playCallback(\"gameOver\", 0);\n        }\n      } catch (error) {\n        console.log(\"Get local storage item topScore error\");\n      }\n      saveTopScoreLocaly(props.count);\n      dispatch(resetCount());\n    }\n  }, [time, props, dispatch]);\n\n  return <span>{time}</span>;\n};\nexport default Timer;\n","import React from \"react\";\n\nimport {useSelector} from \"react-redux\";\nimport {selectCount} from \"../Redux/counterSlice\";\nimport {selectLives} from \"../Redux/livesSlice\";\n\nimport {calculateScore} from \"../Utils/ControlsFunctions\";\nimport Timer from \"./Timer\";\n\nconst Controls = (props) => {\n  const count = useSelector(selectCount);\n  const lives = useSelector(selectLives);\n\n  return (\n    <div className=\"container\" id=\"controls-div\">\n      <div>\n        TIME: <Timer count={count} playCallback={props.playCallback} />\n      </div>\n      <div>{`  POINTS: ${calculateScore(count)}`}</div>\n      <div>{`  LIVES: ${lives}`}</div>\n    </div>\n  );\n};\nexport default Controls;\n","export default __webpack_public_path__ + \"static/media/dr-corona-2.e337685b.svg\";","import React from \"react\";\nimport drCorona from \"../Assets/dr-corona-2.svg\";\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {resetCount, selectCount} from \"../Redux/counterSlice\";\nimport {selectLives, decrementLives, resetLives} from \"../Redux/livesSlice\";\n\nconst DrCoronaIcon = (props) => {\n  const dispatch = useDispatch();\n  const lives = useSelector(selectLives);\n  const count = useSelector(selectCount);\n\n  return (\n    <div className=\"tile-divs\">\n      <img\n        draggable=\"false\"\n        src={drCorona}\n        alt=\"dr-corona-icon\"\n        className=\"game-icon\"\n        onClick={() => {\n          if (lives > 0 && count > 0) {\n            dispatch(decrementLives());\n          } else {\n            dispatch(resetCount());\n            dispatch(resetLives());\n          }\n        }}\n      />\n    </div>\n  );\n};\nexport default DrCoronaIcon;\n","export default __webpack_public_path__ + \"static/media/virus.502d0684.svg\";","import React from \"react\";\nimport VirusSvg from \"../Assets/virus.svg\";\n\nimport {useDispatch} from \"react-redux\";\nimport {incrementCount} from \"../Redux/counterSlice\";\n\nconst VirusIcon = (props) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"tile-divs\">\n      <img\n        draggable=\"false\"\n        src={VirusSvg}\n        alt=\"Virus Icon\"\n        className=\"game-icon\"\n        onClick={() => {\n          dispatch(incrementCount());\n          props.clickCallback();\n        }}\n      />\n    </div>\n  );\n};\nexport default VirusIcon;\n","import DrCoronaIcon from \"../Components/DrCoronaIcon\";\nimport VirusIcon from \"../Components/VirusIcon\";\n\nconst getRandomIntNumber = (max) => {\n  return Math.floor(Math.random() * max);\n};\n\nconst createClassNameArray = (numberOfIcons) => {\n  const classNameArray = Array.from({length: numberOfIcons}, (element) => \"\");\n  classNameArray[getRandomIntNumber(numberOfIcons)] = \"target\";\n  return classNameArray;\n};\n\n// const calculateTileDimensions = () => {\n//   const viewWidth = window.innerWidth;\n//   const tilePixelSize = Math.min(90, viewWidth / 5);\n//   return tilePixelSize;\n// };\n\nexport const getBoardIcons = (numberOfIcons, clickCallback) => {\n  return createClassNameArray(numberOfIcons).map((className, index) => {\n    if (className === \"target\") return <VirusIcon key={index} clickCallback={clickCallback} />;\n    else {\n      return <DrCoronaIcon key={index} />;\n    }\n  });\n};\n","import React, { useState, useEffect } from \"react\";\nimport { getBoardIcons } from \"../Utils/GameBoardFunctions\";\n\nconst GameBoard = () => {\n  const [targetClicked, setTargetClicked] = useState(0);\n  const [iconsJSX, setIconsJSX] = useState(\"\");\n  useEffect(() => {\n    const incrementTargetClicks = () => {\n      setTargetClicked(targetClicked + 1);\n    };\n    setIconsJSX(getBoardIcons(20, incrementTargetClicks));\n  }, [targetClicked]);\n\n  return (\n    <div className=\"container\" id=\"game-board-div\">\n      {iconsJSX}\n    </div>\n  );\n};\nexport default GameBoard;\n","import React from \"react\";\n\nconst TopScore = () => {\n  return (\n    <span className=\"container\" id=\"topscore\">\n      TOP SCORE: {localStorage.getItem(\"topScore\") ? localStorage.getItem(\"topScore\") : \"0\"}\n    </span>\n  );\n};\nexport default TopScore;\n","import React, { useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMobileAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst InstallButton = () => {\n  const [installPrompt, setInstallPrompt] = useState(null);\n\n  useEffect(() => {\n    const handleInstallPrompt = (e) => {\n      e.preventDefault();\n      setInstallPrompt(e);\n    };\n    window.addEventListener(\"beforeinstallprompt\", (e) => handleInstallPrompt(e));\n    return (_) => {\n      window.removeEventListener(\"beforeinstallprompt\", (e) => handleInstallPrompt(e));\n    };\n  }, []);\n\n  return (\n    <div\n      id=\"install-button-constainer\"\n      className={installPrompt ? \"visible\" : \"\"}\n      onClick={() => (installPrompt ? installPrompt.prompt() : undefined)}\n    >\n      <FontAwesomeIcon icon={faMobileAlt} /> Install App\n    </div>\n  );\n};\n\nexport default InstallButton;\n","import React from \"react\";\n\nconst GameOver = (props) => {\n  const newTopScore = () => {\n    const newScore = props.newScore ? props.newScore ** 2 : 0;\n    if (newScore > props.oldScore) {\n      return (\n        <>\n          <div className=\"game-over-modal-text\">Congratulations! You've set a new record!</div>\n          <div className=\"game-over-modal-scores\">\n            Top score: {props.oldScore} {\"\\n\"} New Top Score: {newScore}\n          </div>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <div className=\"game-over-modal-text\">Common... You can do better!</div>\n          <div className=\"game-over-modal-scores\">\n            Top score: {props.oldScore} {\"\\n\"}Score: {newScore}\n          </div>\n        </>\n      );\n    }\n  };\n\n  return (\n    <div id=\"gameover-div\">\n      {props.playGame === \"start\" ? (\n        <>\n          <h1>Start Game</h1>\n          <div className=\"game-over-modal-text\">\n            Welcome to Dr Corona the game! The doctor needs your help to fight the coronovirus. You\n            have 30 seconds to eradicate as many as you can!\n          </div>\n          <button onClick={() => props.playCallback(null)}>Let's Go!</button>\n        </>\n      ) : (\n        <>\n          <h1>Game Over!</h1>\n          {newTopScore()}\n          <button onClick={() => props.playCallback(null)}>Try Again!</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default GameOver;\n","import React, {useState} from \"react\";\nimport Header from \"./Components/Header\";\nimport Controls from \"./Components/Controls\";\nimport GameBoard from \"./Components/GameBoard\";\nimport TopScore from \"./Components/TopScore\";\nimport InstallButton from \"./Components/InstallButton\";\nimport GameOver from \"./Components/GameOver\";\n\nconst App = () => {\n  const [playGame, setPlayGame] = useState(\"start\");\n  const [oldScore, setOldScore] = useState(0);\n  const [newScore, setNewScore] = useState(0);\n\n  const playCallback = (playGame, oldScore, newScore) => {\n    setPlayGame(playGame);\n    setOldScore(oldScore);\n    setNewScore(newScore);\n  };\n  return (\n    <div className=\"App\">\n      {playGame ? (\n        <>\n          <Header />\n          <GameOver\n            playGame={playGame}\n            oldScore={oldScore}\n            newScore={newScore}\n            playCallback={playCallback}\n          />\n        </>\n      ) : (\n        <>\n          <Header />\n          <Controls playCallback={playCallback} />\n          <GameBoard />\n          <TopScore />\n          <InstallButton />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counterSlice\";\nimport livesReducer from \"./livesSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    lives: livesReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./SCSS/main.css\";\nimport App from \"./App\";\nimport { store } from \"./Redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}